//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PetShop
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class bd_dogeEntitiesSqlServer : DbContext
    {
        public bd_dogeEntitiesSqlServer()
            : base("name=bd_dogeEntitiesSqlServer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<tb_categoria> tb_categoria { get; set; }
        public DbSet<tb_producto> tb_producto { get; set; }
        public DbSet<tb_rol> tb_rol { get; set; }
        public DbSet<tb_usuario> tb_usuario { get; set; }
        public DbSet<tb_venta> tb_venta { get; set; }
        public DbSet<tb_ventaxproducto> tb_ventaxproducto { get; set; }
    
        public virtual int registrarDetalleVenta(Nullable<int> idVenta, Nullable<int> idProducto, Nullable<int> cantidad, Nullable<decimal> precio)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("registrarDetalleVenta", idVentaParameter, idProductoParameter, cantidadParameter, precioParameter);
        }
    
        public virtual int registrarUsuario(string correoUsuario, string claveUsuario, string nombresUsuario, string apePatUsuario, string apeMatUsuario, string dniUsuario, Nullable<System.DateTime> fecNacimientoUsuario, string telefonoUsuario, string celularUsuario, Nullable<int> idRol)
        {
            var correoUsuarioParameter = correoUsuario != null ?
                new ObjectParameter("correoUsuario", correoUsuario) :
                new ObjectParameter("correoUsuario", typeof(string));
    
            var claveUsuarioParameter = claveUsuario != null ?
                new ObjectParameter("claveUsuario", claveUsuario) :
                new ObjectParameter("claveUsuario", typeof(string));
    
            var nombresUsuarioParameter = nombresUsuario != null ?
                new ObjectParameter("nombresUsuario", nombresUsuario) :
                new ObjectParameter("nombresUsuario", typeof(string));
    
            var apePatUsuarioParameter = apePatUsuario != null ?
                new ObjectParameter("apePatUsuario", apePatUsuario) :
                new ObjectParameter("apePatUsuario", typeof(string));
    
            var apeMatUsuarioParameter = apeMatUsuario != null ?
                new ObjectParameter("apeMatUsuario", apeMatUsuario) :
                new ObjectParameter("apeMatUsuario", typeof(string));
    
            var dniUsuarioParameter = dniUsuario != null ?
                new ObjectParameter("dniUsuario", dniUsuario) :
                new ObjectParameter("dniUsuario", typeof(string));
    
            var fecNacimientoUsuarioParameter = fecNacimientoUsuario.HasValue ?
                new ObjectParameter("fecNacimientoUsuario", fecNacimientoUsuario) :
                new ObjectParameter("fecNacimientoUsuario", typeof(System.DateTime));
    
            var telefonoUsuarioParameter = telefonoUsuario != null ?
                new ObjectParameter("telefonoUsuario", telefonoUsuario) :
                new ObjectParameter("telefonoUsuario", typeof(string));
    
            var celularUsuarioParameter = celularUsuario != null ?
                new ObjectParameter("celularUsuario", celularUsuario) :
                new ObjectParameter("celularUsuario", typeof(string));
    
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("idRol", idRol) :
                new ObjectParameter("idRol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("registrarUsuario", correoUsuarioParameter, claveUsuarioParameter, nombresUsuarioParameter, apePatUsuarioParameter, apeMatUsuarioParameter, dniUsuarioParameter, fecNacimientoUsuarioParameter, telefonoUsuarioParameter, celularUsuarioParameter, idRolParameter);
        }
    
        public virtual int registrarVenta(Nullable<int> idUsuario, Nullable<bool> estadoVenta)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var estadoVentaParameter = estadoVenta.HasValue ?
                new ObjectParameter("estadoVenta", estadoVenta) :
                new ObjectParameter("estadoVenta", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("registrarVenta", idUsuarioParameter, estadoVentaParameter);
        }
    }
}
